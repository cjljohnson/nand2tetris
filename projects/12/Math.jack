// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static array jpowers;

    /** Initializes the library. */
    function void init() {
        var int i;

        let jpowers = Array.new(8);
        let jpowers[0] = 1;
        let jpowers[1] = 2;
        let jpowers[2] = 4;
        let jpowers[3] = 8;
        let jpowers[4] = 16;
        let jpowers[5] = 32;
        let jpowers[6] = 64;
        let jpowers[7] = 128;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return 0 - x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i;
        var int bit;
        var int total;
        var int shiftedX;

        let i = 0;
        let bit = 1;
        let total = 0;
        let shiftedX = x;

        while (i < 16) {
            if (~((bit & y) = 0)) {
                let total = total + shiftedX;
            }
            let bit = bit + bit;
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return total;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean isNegative;
        var int result;

        let isNegative = ~((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);

        if ((x - (2 * q * y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (isNegative) {
            return 0 - result;
        } else {
            return result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int temp;

        let j = 7;
        let y = 0;

        while (j > -1) {
            let temp = (y + jpowers[j]) * (y + jpowers[j]);

            if ((temp < (x + 1)) & (temp > 0)) {
                let y = y + jpowers[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
