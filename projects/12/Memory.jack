// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static array heap;
    static array freeList;

    /** Initializes the class. */
    function void init() {
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        let freeList = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var array ram;
        let ram = 0;
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var array ram;
        let ram = 0;
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var array currNode;
        var array prevNode;
        var array block;

        let currNode = freeList;
        let prevNode = freeList;
        let block = 0;

        while ((block = 0) & (~(currNode = 0))) {
            if (currNode[1] > (size + 2)) {
                let block = currNode + 2 + currNode[1] - size;
                let block[-1] = size;
                let block[-2] = 0;
                let currNode[1] = currNode[1] - (size + 2);
            } else {
                let prevNode = currNode;
                let currNode = currNode[0];
            }
        }

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var array node;

        let node = freeList;

        while (~(node[0] = 0)) {
            let node = node[0];
        }

        let node[0] = o - 2;
        return;
    }    
}
