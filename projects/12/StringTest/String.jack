// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field array s;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let s = Array.new(maxLength + 1);
        let s[0] = 0;
        let length = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(s);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
            let s[length] = c;
            let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let s[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index;
        var int num;
        var boolean isNegative;

        let index = 0;
        let num = 0;
        let isNegative = false;

        // Check if negative number
        if (s[0] = 45) {
            let isNegative = true;
            let index = 1;
        }

        while ((s[index] > 47) & (s[index] < 58)) {
            let num = num * 10;
            let num = num + (s[index] - 48);
            let index = index + 1;
        }

        if (isNegative) {
            return -num;
        } else {
            return num;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int valCopy;
        var int digits;
        var boolean isNegative;

        let valCopy = val;
        let digits = 0;

        // Special cases for 0 or negative number
        if (val = 0) {
            let digits = 1;
        }
        if (val < 0) {
            let digits = 1;
            let isNegative = true;
        }

        // Count digits
        while (~(valCopy = 0)) {
            let digits = digits + 1;
            let valCopy = valCopy / 10;
        }

        let length = digits;

        // Set null at end of string
        let s[digits] = 0;

        let val = Math.abs(val);

        // Add ascii for digits in reverse order
        while (digits > 0) {
            let s[(digits - 1)] = val - ((val / 10) * 10) + 48;
            let val = val / 10;
            let digits = digits - 1;
        }

        // If negative add '-' at beginning
        if (isNegative) {
            let s[0] = 45;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
