@256
D=A
@0
M=D
@RETURN_FLAG1
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@R1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN_FLAG1)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@TRUE2
D;JLT
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(TRUE2)
@SP
A=M-1
M=-1
(CONTINUE2)
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@FALSE3
D;JEQ
@IF_TRUE
0;JMP
(FALSE3)
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R11
M=D
@5
A=D-A
D=M
@R12
M=D
@ARG
D=M
@0
D=D+A
@SP
A=M
M=D
A=A-1
D=M
A=A+1
A=M
M=D
@SP
M=M-1
@ARG
D=M+1
@SP
M=D
@R11
A=M-1
D=M
@THAT
M=D
@R11
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R11
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R11
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R12
A=M
0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@RETURN_FLAG4
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@R1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FLAG4)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@RETURN_FLAG5
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@R1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FLAG5)
// add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
// return
@LCL
D=M
@R11
M=D
@5
A=D-A
D=M
@R12
M=D
@ARG
D=M
@0
D=D+A
@SP
A=M
M=D
A=A-1
D=M
A=A+1
A=M
M=D
@SP
M=M-1
@ARG
D=M+1
@SP
M=D
@R11
A=M-1
D=M
@THAT
M=D
@R11
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R11
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R11
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R12
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@RETURN_FLAG6
D=A
@SP
M=M+1
A=M-1
M=D
@0
D=A
@R1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@R4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FLAG6)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
